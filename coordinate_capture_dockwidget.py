# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CoordinateCaptureDockWidget
                                 A QGIS plugin
 Python port of the deprecated Coordinate Capture core plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-07-04
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Stefanos Natsis
        email                : uclaros@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtCore import pyqtSignal
from qgis.PyQt.QtWidgets import QWidget, QDockWidget, QGridLayout, QPushButton, QLineEdit, QToolButton, QLabel
from qgis.PyQt.QtGui import QIcon, QPixmap



class CoordinateCaptureDockWidget(QDockWidget):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(CoordinateCaptureDockWidget, self).__init__(parent)

        self.setWindowTitle(self.tr("Coordinate Capture"))
        self.setGeometry(0, 0, 300, 228)
        self.dockWidgetContents = QWidget(self)
        self.setWidget(self.dockWidgetContents)
        self.gridLayout = QGridLayout()
        self.dockWidgetContents.setLayout(self.gridLayout)

        self.dockWidgetContents.layout().setColumnMinimumWidth(0, 36)

        self.userCrsToolButton = QToolButton(self.dockWidgetContents)
        self.userCrsToolButton.setIcon(QIcon(":/plugins/coordinate_capture/mIconProjectionEnabled.svg"))
        self.userCrsToolButton.setToolTip(self.tr("Click to select the CRS to use for coordinate display"))

        self.userCrsLabel = QLabel(self.dockWidgetContents)
        self.userCrsLabel.setPixmap(QPixmap(":/plugins/coordinate_capture/transformed.svg"))
        self.userCrsLabel.setGeometry(self.userCrsToolButton.geometry())

        self.userCrsEdit = QLineEdit(self.dockWidgetContents)
        self.userCrsEdit.setReadOnly(True)
        self.userCrsEdit.setToolTip(self.tr("Coordinate in your selected CRS (lat,lon or east,north)"))
        self.copyUserCrsCoordinatesAction = self.userCrsEdit.addAction(QIcon(":/plugins/coordinate_capture/mActionEditCopy.svg"),
                                                                       QLineEdit.TrailingPosition)
        self.copyUserCrsCoordinatesAction.triggered.connect(self.copyUserCrsCoordinates)

        
        self.canvasCrsEdit = QLineEdit(self.dockWidgetContents)
        self.canvasCrsEdit.setReadOnly(True)
        self.canvasCrsEdit.setToolTip(self.tr("Coordinate in map canvas coordinate reference system (lat,lon or east,north)"))
        self.copyCanvasCrsCoordinatesAction = self.canvasCrsEdit.addAction(QIcon(":/plugins/coordinate_capture/mActionEditCopy.svg"),
                                                                           QLineEdit.TrailingPosition)
        self.copyCanvasCrsCoordinatesAction.triggered.connect(self.copyCanvasCrsCoordinates)

        
        self.userCrsEdit1 = QLineEdit(self.dockWidgetContents)
        self.userCrsEdit1.setReadOnly(True)
        self.userCrsEdit1.setToolTip(self.tr("Coordinate in your selected CRS (lat,lon or east,north)"))


        self.canvasCrsEdit1 = QLineEdit(self.dockWidgetContents)
        self.canvasCrsEdit1.setReadOnly(True)
        self.canvasCrsEdit1.setToolTip(self.tr("Coordinate in map canvas coordinate reference system (lat,lon or east,north)"))

        
        self.userCrsEdit2 = QLineEdit(self.dockWidgetContents)
        self.userCrsEdit2.setReadOnly(True)
        self.userCrsEdit2.setToolTip(self.tr("Coordinate in your selected CRS (lat,lon or east,north)"))


        self.canvasCrsEdit2 = QLineEdit(self.dockWidgetContents)
        self.canvasCrsEdit2.setReadOnly(True)
        self.canvasCrsEdit2.setToolTip(self.tr("Coordinate in map canvas coordinate reference system (lat,lon or east,north)"))

        
        self.trackMouseButton = QToolButton(self.dockWidgetContents)
        self.trackMouseButton.setIcon(QIcon(":/plugins/coordinate_capture/tracking.svg"))
        self.trackMouseButton.setCheckable(True)
        self.trackMouseButton.setToolTip(self.tr("Click to enable mouse tracking. Click the canvas to stop"))
        self.trackMouseButton.setChecked(False)
        
        self.crossMouseButton = QToolButton(self.dockWidgetContents)
        self.crossMouseButton.setIcon(QIcon(":/plugins/coordinate_capture/CroserChange.svg"))
        self.crossMouseButton.setCheckable(True)
        self.crossMouseButton.setToolTip(self.tr("Click to change the cursor"))
        self.crossMouseButton.setChecked(False)

        
        # Create the action for tool
        self.captureButton = QPushButton(self.dockWidgetContents)
        self.captureButton.setText(self.tr("Start Capture"))
        self.captureButton.setToolTip(self.tr("Click to enable coordinate capture"))
        self.captureButton.setIcon(QIcon(":/plugins/coordinate_capture/coordinate_capture.png"))
        self.captureButton.setWhatsThis(self.tr("Click on the map to view coordinates and capture to clipboard."))

        # // Set the icons
        # setCurrentTheme(QString());

        self.dockWidgetContents.layout().addWidget(self.userCrsToolButton, 0, 0)
        self.dockWidgetContents.layout().addWidget(self.userCrsEdit, 0, 1)
        self.dockWidgetContents.layout().addWidget(self.userCrsLabel, 1, 0)
        self.dockWidgetContents.layout().addWidget(self.canvasCrsEdit, 1, 1)
        self.dockWidgetContents.layout().addWidget(self.userCrsEdit1, 2, 1)
        self.dockWidgetContents.layout().addWidget(self.canvasCrsEdit1, 3, 1)
        self.dockWidgetContents.layout().addWidget(self.userCrsEdit2, 4, 1)
        self.dockWidgetContents.layout().addWidget(self.canvasCrsEdit2, 5, 1)
        self.dockWidgetContents.layout().addWidget(self.crossMouseButton, 6, 0)
        self.dockWidgetContents.layout().addWidget(self.captureButton, 6, 1)
        self.dockWidgetContents.layout().addWidget(self.trackMouseButton, 7, 0)
        self.dockWidgetContents.layout().addWidget(self.captureButton, 7, 1)
        


    def copyUserCrsCoordinates(self):
        self.userCrsEdit.selectAll()
        self.userCrsEdit.copy()

    def copyCanvasCrsCoordinates(self):
        self.canvasCrsEdit.selectAll()
        self.canvasCrsEdit.copy()

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
